// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "commands.proto" (package "proto.packets", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameplayParameters } from './models.js';
/**
 * ---- Commands (DO something!) ---- //
 *
 * @generated from protobuf message proto.packets.Command
 */
export interface Command {
    /**
     * @generated from protobuf field: string tournament_id = 11;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: repeated string forward_to = 12;
     */
    forwardTo: string[];
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "returnToMenu";
        /**
         * @generated from protobuf field: bool return_to_menu = 2;
         */
        returnToMenu: boolean;
    } | {
        oneofKind: "delayTestFinish";
        /**
         * @generated from protobuf field: bool delay_test_finish = 3;
         */
        delayTestFinish: boolean;
    } | {
        oneofKind: "streamSyncShowImage";
        /**
         * @generated from protobuf field: bool stream_sync_show_image = 4;
         */
        streamSyncShowImage: boolean;
    } | {
        oneofKind: "playSong";
        /**
         * @generated from protobuf field: proto.packets.Command.PlaySong play_song = 6;
         */
        playSong: Command_PlaySong;
    } | {
        oneofKind: "discordAuthorize";
        /**
         * @generated from protobuf field: string discord_authorize = 9;
         */
        discordAuthorize: string;
    } | {
        oneofKind: "modifyGameplay";
        /**
         * @generated from protobuf field: proto.packets.Command.ModifyGameplay modify_gameplay = 10;
         */
        modifyGameplay: Command_ModifyGameplay;
    } | {
        oneofKind: "showColorForStreamSync";
        /**
         * @generated from protobuf field: proto.packets.Command.ShowColorForStreamSync show_color_for_stream_sync = 13;
         */
        showColorForStreamSync: Command_ShowColorForStreamSync;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packets.Command.PlaySong
 */
export interface Command_PlaySong {
    /**
     * @generated from protobuf field: proto.models.GameplayParameters gameplay_parameters = 1;
     */
    gameplayParameters?: GameplayParameters;
}
/**
 * @generated from protobuf message proto.packets.Command.ModifyGameplay
 */
export interface Command_ModifyGameplay {
    /**
     * @generated from protobuf field: proto.packets.Command.ModifyGameplay.Modifier modifier = 1;
     */
    modifier: Command_ModifyGameplay_Modifier;
}
/**
 * @generated from protobuf enum proto.packets.Command.ModifyGameplay.Modifier
 */
export enum Command_ModifyGameplay_Modifier {
    /**
     * @generated from protobuf enum value: InvertColors = 0;
     */
    InvertColors = 0,
    /**
     * @generated from protobuf enum value: InvertHandedness = 1;
     */
    InvertHandedness = 1
}
/**
 * @generated from protobuf message proto.packets.Command.ShowColorForStreamSync
 */
export interface Command_ShowColorForStreamSync {
    /**
     * @generated from protobuf field: string color = 1;
     */
    color: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Command$Type extends MessageType<Command> {
    constructor() {
        super("proto.packets.Command", [
            { no: 11, name: "tournament_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "forward_to", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "return_to_menu", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "delay_test_finish", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "stream_sync_show_image", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "play_song", kind: "message", oneof: "type", T: () => Command_PlaySong },
            { no: 9, name: "discord_authorize", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "modify_gameplay", kind: "message", oneof: "type", T: () => Command_ModifyGameplay },
            { no: 13, name: "show_color_for_stream_sync", kind: "message", oneof: "type", T: () => Command_ShowColorForStreamSync }
        ]);
    }
    create(value?: PartialMessage<Command>): Command {
        const message = { tournamentId: "", forwardTo: [], type: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command): Command {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tournament_id */ 11:
                    message.tournamentId = reader.string();
                    break;
                case /* repeated string forward_to */ 12:
                    message.forwardTo.push(reader.string());
                    break;
                case /* bool return_to_menu */ 2:
                    message.type = {
                        oneofKind: "returnToMenu",
                        returnToMenu: reader.bool()
                    };
                    break;
                case /* bool delay_test_finish */ 3:
                    message.type = {
                        oneofKind: "delayTestFinish",
                        delayTestFinish: reader.bool()
                    };
                    break;
                case /* bool stream_sync_show_image */ 4:
                    message.type = {
                        oneofKind: "streamSyncShowImage",
                        streamSyncShowImage: reader.bool()
                    };
                    break;
                case /* proto.packets.Command.PlaySong play_song */ 6:
                    message.type = {
                        oneofKind: "playSong",
                        playSong: Command_PlaySong.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).playSong)
                    };
                    break;
                case /* string discord_authorize */ 9:
                    message.type = {
                        oneofKind: "discordAuthorize",
                        discordAuthorize: reader.string()
                    };
                    break;
                case /* proto.packets.Command.ModifyGameplay modify_gameplay */ 10:
                    message.type = {
                        oneofKind: "modifyGameplay",
                        modifyGameplay: Command_ModifyGameplay.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).modifyGameplay)
                    };
                    break;
                case /* proto.packets.Command.ShowColorForStreamSync show_color_for_stream_sync */ 13:
                    message.type = {
                        oneofKind: "showColorForStreamSync",
                        showColorForStreamSync: Command_ShowColorForStreamSync.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).showColorForStreamSync)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tournament_id = 11; */
        if (message.tournamentId !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.tournamentId);
        /* repeated string forward_to = 12; */
        for (let i = 0; i < message.forwardTo.length; i++)
            writer.tag(12, WireType.LengthDelimited).string(message.forwardTo[i]);
        /* bool return_to_menu = 2; */
        if (message.type.oneofKind === "returnToMenu")
            writer.tag(2, WireType.Varint).bool(message.type.returnToMenu);
        /* bool delay_test_finish = 3; */
        if (message.type.oneofKind === "delayTestFinish")
            writer.tag(3, WireType.Varint).bool(message.type.delayTestFinish);
        /* bool stream_sync_show_image = 4; */
        if (message.type.oneofKind === "streamSyncShowImage")
            writer.tag(4, WireType.Varint).bool(message.type.streamSyncShowImage);
        /* proto.packets.Command.PlaySong play_song = 6; */
        if (message.type.oneofKind === "playSong")
            Command_PlaySong.internalBinaryWrite(message.type.playSong, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string discord_authorize = 9; */
        if (message.type.oneofKind === "discordAuthorize")
            writer.tag(9, WireType.LengthDelimited).string(message.type.discordAuthorize);
        /* proto.packets.Command.ModifyGameplay modify_gameplay = 10; */
        if (message.type.oneofKind === "modifyGameplay")
            Command_ModifyGameplay.internalBinaryWrite(message.type.modifyGameplay, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* proto.packets.Command.ShowColorForStreamSync show_color_for_stream_sync = 13; */
        if (message.type.oneofKind === "showColorForStreamSync")
            Command_ShowColorForStreamSync.internalBinaryWrite(message.type.showColorForStreamSync, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Command
 */
export const Command = new Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_PlaySong$Type extends MessageType<Command_PlaySong> {
    constructor() {
        super("proto.packets.Command.PlaySong", [
            { no: 1, name: "gameplay_parameters", kind: "message", T: () => GameplayParameters }
        ]);
    }
    create(value?: PartialMessage<Command_PlaySong>): Command_PlaySong {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_PlaySong>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_PlaySong): Command_PlaySong {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.GameplayParameters gameplay_parameters */ 1:
                    message.gameplayParameters = GameplayParameters.internalBinaryRead(reader, reader.uint32(), options, message.gameplayParameters);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_PlaySong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.GameplayParameters gameplay_parameters = 1; */
        if (message.gameplayParameters)
            GameplayParameters.internalBinaryWrite(message.gameplayParameters, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.PlaySong
 */
export const Command_PlaySong = new Command_PlaySong$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_ModifyGameplay$Type extends MessageType<Command_ModifyGameplay> {
    constructor() {
        super("proto.packets.Command.ModifyGameplay", [
            { no: 1, name: "modifier", kind: "enum", T: () => ["proto.packets.Command.ModifyGameplay.Modifier", Command_ModifyGameplay_Modifier] }
        ]);
    }
    create(value?: PartialMessage<Command_ModifyGameplay>): Command_ModifyGameplay {
        const message = { modifier: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_ModifyGameplay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_ModifyGameplay): Command_ModifyGameplay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.packets.Command.ModifyGameplay.Modifier modifier */ 1:
                    message.modifier = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_ModifyGameplay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.packets.Command.ModifyGameplay.Modifier modifier = 1; */
        if (message.modifier !== 0)
            writer.tag(1, WireType.Varint).int32(message.modifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.ModifyGameplay
 */
export const Command_ModifyGameplay = new Command_ModifyGameplay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command_ShowColorForStreamSync$Type extends MessageType<Command_ShowColorForStreamSync> {
    constructor() {
        super("proto.packets.Command.ShowColorForStreamSync", [
            { no: 1, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Command_ShowColorForStreamSync>): Command_ShowColorForStreamSync {
        const message = { color: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Command_ShowColorForStreamSync>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_ShowColorForStreamSync): Command_ShowColorForStreamSync {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string color */ 1:
                    message.color = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Command_ShowColorForStreamSync, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string color = 1; */
        if (message.color !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.color);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.ShowColorForStreamSync
 */
export const Command_ShowColorForStreamSync = new Command_ShowColorForStreamSync$Type();
